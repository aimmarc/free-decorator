export declare const isString: (target: any) => boolean;
export declare const isNumber: (target: any) => boolean;
export declare const isObject: (target: any) => boolean;
export declare const isArray: (target: any) => boolean;
export declare const isFunction: (target: any) => boolean;
export declare const isSymbol: (target: any) => boolean;
export declare const isUndefined: (obj: any) => obj is undefined;
export declare const isNil: (val: any) => val is null | undefined;
export declare const isPromise: (obj: any) => obj is Promise<any>;
type InferCapitalize<T extends string> = T extends `${infer U}${infer R}` ? `${Uppercase<U>}${R}` : T;
type InferCapitalizeUpperCaseLetter<T extends string> = T extends `${infer U}` ? `${Uppercase<U>}` : T;
export declare const capitalizeFirstLetter: <T extends string>(string: T) => InferCapitalize<T>;
export declare const capitalizeUpperCaseLetter: <T extends string>(string: T) => InferCapitalizeUpperCaseLetter<T>;
export {};
